A ciklikus számlisták feladvány

Adott egy n*n mezőből álló, négyzet alakú tábla, amelynek egyes mezőiben 1 és m közötti számok vannak. A feladat az, hogy további 1 és m közötti számokat helyezzünk el a táblában úgy, hogy az alábbi feltételek teljesüljenek:
Minden sorban és minden oszlopban az 1..m számok mindegyike pontosan egyszer szerepel.
A bal felső sarokból induló tekeredő vonal mentén a számok rendre az 1,2,...m,1,2,...,m,... sorrendben követik egymást.
A tekeredő vonalat a következőképpen definiáljuk. Először a négyzet első sorában haladunk balról jobbra, majd az utolsó oszlopban felülről lefelé. Ezután az utolsó sorban megyünk jobbról balra, majd az első oszlopban alulról fölfelé, egészen a 2. sor 1. mezőjéig. Miután így bejártuk a négyzetes tábla szélső sorait és oszlopait, rekurzívan folytatjuk a bejárást a 2. sor 2. mezőjében kezdődő (n-2)*(n-2) mezőből álló négyzettel.
Az 1. ábra egy feladványt ábrázol, a 2. ábra ennek (egyetlen) megoldását mutatja.

1. ábra: Egy feladvány (n=6, m=3)

-----------------------\
                  2     |
/-------------------\   |
|     1             |   |
|   /-----------\   |   |
|   |           |   |   |
|   |   /---\   |   |   |
|   |   |       |   | 1 |
|   |   \-------/   |   |
|   |               |   |
|   \---------------/   |
|                       |
\-----------------------/

2. ábra: A feladvány megoldása

-----------------------\
  1   -   -   -   2   3 |
/-------------------\   |
| -   1   2   3   - | - |
|   /-----------\   |   |
| - | 3   1   2 | - | - |
|   |   /---\   |   |   |
| - | 2 | 3   - | - | 1 |
|   |   \-------/   |   |
| 3 | -   -   -   1 | 2 |
|   \---------------/   |
| 2   -   -   1   3   - |
\-----------------------/


A feladat egy Elixir-függvény megírása. A formális specifikációt lejjebb találja.

A függvénynek két paramétere van. Az első egy hármas, ennek első tagja n, a számsorozatok száma az előállítandó listákban. Második tagja m, az ismétlődő számsorozat hossza, harmadik tagja pedig len, az előállítandó listák hossza. A második paraméter olyan {ix,val} párok (esetleg üres) listája, amelyek azt írják elő, hogy a listák ix indexű helyén val értékű elemnek kell lennie. A paraméterekre vonatkozó korlátok: 1 < n, 1 ≤ m, n*m ≤ len, 1 ≤ ix ≤ len, 0 ≤ val ≤ m. Figyelem: az Elixir a listát 0-tól, a feladvány 1-től indexeli.
A függvény eredménye az összes olyan len hosszú lista listája, melyekben az 1-től m-ig tartó számsorozat – ebben a sorrendben, esetleg közbeszúrt 0-kal – n-szer ismétlődik,
len-n*m számú helyen 0-k vannak, a korlát-listában felsorolt indexű cellákban a megadott értékű elemek vannak.
Feltételezheti, hogy a bemenő paraméterek szintaktikailag, szemantikailag helyesek.

Például ha {n, m, len} = {7, 5, 36} és a korlát-lista [{33,3}], akkor a függvényhívás eredménye ez lesz:

  [ [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 0, 4, 5],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 5],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0]
  ]

Elixir-specifikációk

Típusok
  @type count() :: integer() # számsorozatok száma, n (1 < n)
  @type cycle() :: integer() # számsorozat hossza, m (1 <= m)
  @type size()  :: integer() # listahossz, len (1 < len)
  @type value() :: integer() # listaelem értéke, val (0 <= val <= m)
  @type index() :: integer() # listaelem sorszáma, ix (1 <= ix <= len)
  @type index_value() :: {index(), value()} # listaelem indexe és értéke
   
A cyclists/3 függvény specifikációja

  @spec cyclists({n::count(), m::cycle(), len::size()}, constraints::[index_value()]) :: results::[[value()]]
  # results az összes olyan len hosszú lista listája, melyekben
  # * az 1-től m-ig tartó számsorozat – ebben a sorrendben, esetleg közbeszúrt 0-kal – n-szer ismétlődik,
  # * len-n*m számú helyen 0-k vannak,
  # * a constraints korlát-listában felsorolt indexű cellákban a megadott értékű elemek vannak.
  def cyclists({n, m, len}, constraints) do
  ...
  end

Példák

  iex> Khf3.cyclists({7, 5, 37}, [{3,0},{6,4},{9,2}])
  [
    [0, 1, 0, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,
     5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
    [1, 0, 0, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,
     5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
    [1, 2, 0, 0, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,
     5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
    [1, 2, 0, 3, 0, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,
     5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
  ]

  iex> Khf3.cyclists({10, 7, 72}, [{1,0},{2,0}])
  [
    [0, 0, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3,
     4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1,
     2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]
  ]

  iex> Khf3.cyclists({9, 5, 49}, [{44,4}])
  [
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,
     2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 0, 0, 0, 5],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,
     2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 0, 0, 5, 0],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,
     2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 0, 5, 0, 0],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,
     2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 5, 0, 0, 0],
    [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,
     2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0, 0, 0, 0]
  ]

Egyéb követelmények

A segédfüggvények legyenek lokálisak (defp), írjon hozzájuk típusspecifikációt és fejkommentként tömör leírást is.
A beadott programokat Linux környezetben Elixir 1.18 (Erlang/OTP 28) rendszerrel teszteljük.

Sablon a program megírásához:

defmodule Khf3 do
  
  @type count() :: integer() # számsorozatok száma, n (1 < n)
  @type cycle() :: integer() # számsorozat hossza, m (1 <= m)
  @type size()  :: integer() # listahossz, len (1 < len)
  @type value() :: integer() # listaelem értéke, val (0 <= val <= m)
  @type index() :: integer() # listaelem sorszáma, ix (1 <= ix <= len)
  @type index_value() :: {index(), value()} # listaelem indexe és értéke

  @spec cyclists({n::count(), m::cycle(), len::size()}, constraints::[index_value()]) \
    :: results::[[value()]]
  # results az összes olyan len hosszú lista listája, melyekben
  # * az 1-től m-ig tartó számsorozat – ebben a sorrendben, esetleg
  #   közbeszúrt 0-kal – n-szer ismétlődik,
  # * len-n*m számú helyen 0-k vannak,
  # * a constraints korlát-listában felsorolt indexű cellákban a megadott
  #   értékű elemek vannak.
  def cyclists({n, m, len}, constraints) do
    ...
  end
end

Szkript a tesztesetek futtatásához:

defmodule Khf3Testcases do

  testcases = # %{key => {{puzzle, constraints}, solutions}}
    %{
       0 =>
       {{{3, 2, 7}, []},
         [
           [0, 1, 2, 1, 2, 1, 2],
           [1, 0, 2, 1, 2, 1, 2],
           [1, 2, 0, 1, 2, 1, 2],
           [1, 2, 1, 0, 2, 1, 2],
           [1, 2, 1, 2, 0, 1, 2],
           [1, 2, 1, 2, 1, 0, 2],
           [1, 2, 1, 2, 1, 2, 0],
         ]
       },
       1 => {{{3, 2, 7}, [{4, 0}]},
         [[1, 2, 1, 0, 2, 1, 2]]
       },
       2 => {{{3, 2, 12}, [{2, 1}, {6, 2}, {10, 1}, {12, 2}]},
         [
           [0, 1, 0, 0, 0, 2, 0, 1, 2, 1, 0, 2],
           [0, 1, 0, 0, 0, 2, 1, 0, 2, 1, 0, 2],
           [0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 2],
           [0, 1, 0, 2, 1, 2, 0, 0, 0, 1, 0, 2],
           [0, 1, 2, 0, 1, 2, 0, 0, 0, 1, 0, 2],
           [0, 1, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2],
         ]
       },
       3 => {{{4, 6, 36}, [{5, 5}, {10, 0}, {13, 6}, {15, 1}, {19, 5}, {21, 0}, {23, 2}, {25, 3}, {27, 4}, {29, 6}, {33, 0}]},
         [
           [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 3, 0, 4, 5, 6, 1, 2, 3, 0, 4, 5, 6],
           [1, 2, 3, 4, 5, 6, 1, 2, 3, 0, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 3, 0, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0],
         ]
       },
       4 => {{{7, 5, 37}, [{1, 0}, {2, 0}]},
          [
            [0, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
          ]
       },
       5 => {{{8, 5, 47}, [{39, 4}, {43, 5}]},
          [
            [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 0, 0, 0, 5, 0, 0, 0, 0]
          ]
       },
       6 => {{{3, 12, 36}, [{1, 1}, {19, 7}, {36, 12}]},
         [
           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
         ]
       },
      7 => {{{2, 15, 40}, [{1, 1}, {30, 15}]},
        [
          [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]
       },
      8 => {{{15, 12, 189}, [{10,1},{69,12}]},
	[
	  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,
	   5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	]
       },
      9 => {{{17, 17, 291}, [{4,2}]},
	[
          [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4,
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2,
           3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8,
           9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
           14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1,
           2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7,
           8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
           13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
           17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5,
           6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17],
          [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4,
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2,
           3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8,
           9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
           14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1,
           2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7,
           8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
           13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
           17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5,
           6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17],
          [1, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4,
           5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2,
           3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8,
           9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
           14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1,
           2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7,
           8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
           13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
           17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5,
           6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
           11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
           15, 16, 17],
        ]
       },
       10 => {{{2, 3, 12}, [{1, 1}, {4, 1}, {10, 1}, {12, 3}]},
        []
       },
       11 => {{{2, 2, 15}, [{4,1},{8,2},{12,2}]},
        [
          [0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0],
          [0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0],
          [0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0],
        ]
       },
       12 => {{{5, 3, 20}, [{4, 1}, {8, 2}, {10, 3}, {11, 1}, {15, 2}, {17, 3}, {19, 2}]},
        [
          [0, 0, 0, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3],
          [1, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3],
          [1, 2, 3, 1, 2, 3, 1, 2, 0, 3, 1, 0, 0, 0, 2, 0, 3, 1, 2, 3],
        ]
       },
       13 => {{{5, 3, 20}, [{4, 1}, {8, 2}, {10, 3}, {11, 1}, {15, 2}, {17, 3}, {20, 2}]},
        []
       },
       14 => {{{5, 3, 20}, [{4, 1}, {8, 2}, {10, 3}, {11, 1}, {15, 2}, {17, 3}, {20, 3}]},
        [
          [0, 0, 0, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3],
          [1, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 2, 3, 1, 2, 0, 3, 1, 2, 3],
          [1, 2, 3, 1, 2, 3, 1, 2, 0, 3, 1, 0, 0, 0, 2, 0, 3, 1, 2, 3],
        ]
       },
       15 => {{{3, 3, 15}, [{4, 1}, {8, 2}, {10, 3}, {11, 1}, {15, 3}]},
        [
          [0, 0, 0, 1, 2, 3, 1, 2, 0, 3, 1, 0, 0, 2, 3],
          [0, 0, 0, 1, 2, 3, 1, 2, 0, 3, 1, 0, 2, 0, 3],
          [0, 0, 0, 1, 2, 3, 1, 2, 0, 3, 1, 2, 0, 0, 3],
          [1, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 0, 0, 2, 3],
          [1, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 0, 2, 0, 3],
          [1, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 2, 0, 0, 3],
        ]
       }
    }
  for i <- 0..map_size(testcases)-1
    do
    {{puzzle, constrains}, solution} = testcases[i]
    {"Test case #{i}",
     (Khf3.cyclists(puzzle, constrains) |> Enum.sort()) === solution
    }
    |> IO.inspect()
  end

end